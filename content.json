{"meta":{"title":"风吹歪的博客","subtitle":"","description":"","author":"风吹歪","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"两小时光线追踪速成——《RayTracing in One Weekend》实践","slug":"ray-tracing-one-week","date":"2019-12-08T13:13:48.000Z","updated":"2019-12-11T06:59:53.033Z","comments":true,"path":"2019/12/08/ray-tracing-one-week/","link":"","permalink":"http://yoursite.com/2019/12/08/ray-tracing-one-week/","excerpt":"","text":"最近利用一个周末实践了一下Peter Shelley的《Ray Tracing In One Weekend》，发现原来意外的简洁优美，代码量也非常少，特意总结一下。 1.输出图片这里没用书里的方法，因为Windows的PPM格式不能直接看，所以用了一个兼容性更好的方法，输出PNG，这里要感谢Milo Yip大大提供的工具 极简PNG编码函数svpng() 用法： 1#include \"svpng.inc\"23void test_rgb(void) &#123;4 unsigned char rgb[256 * 256 * 3], *p = rgb;5 unsigned x, y;6 FILE *fp = fopen(\"rgb.png\", \"wb\");7 for (y = 0; y &lt; 256; y++)8 for (x = 0; x &lt; 256; x++) &#123;9 *p++ = (unsigned char)x; /* R */10 *p++ = (unsigned char)y; /* G */11 *p++ = 128; /* B */12 &#125;13 svpng(fp, 256, 256, rgb, 0);14 fclose(fp);15&#125; 2.定义向量类定义一个vec3类表示三维向量，既可以用来表示颜色，也可以用来表示坐标，还可以用来表示空间向量，是一个万金油类，因此重载一些常见的运算，值得一提的是向量的点积和叉积运算。点积的结果是标量，在图形学中可以用来求投影长度，也可以求向量夹角。叉积的结果是向量，可以用来求两个向量的法向量。所以定义两个内联函数dot和cross来求vec3的点积和叉积。 1class vec32&#123;3public:4 float e[3];5 vec3() &#123;&#125;6 vec3(float e0, float e1, float e2)&#123;7 e[0] = e0;8 e[1] = e1;9 e[2] = e2;10 &#125;1112 inline float x() const &#123; return e[0]; &#125;13 inline float y() const &#123; return e[1]; &#125;14 inline float z() const &#123; return e[2]; &#125;1516 inline float r() const &#123; return e[0]; &#125;17 inline float g() const &#123; return e[1]; &#125;18 inline float b() const &#123; return e[2]; &#125;1920 inline const vec3 &amp;operator+() const &#123; return *this; &#125;21 inline vec3 operator-() const &#123; return vec3(-e[0], -e[1], -e[2]); &#125; //????22 inline float operator[](int i) const &#123; return e[i]; &#125;23 inline float &amp;operator[](int i) &#123; return e[i]; &#125;2425 inline vec3 &amp;operator+=(const vec3 &amp;v2);26 inline vec3 &amp;operator-=(const vec3 &amp;v3);27 inline vec3 &amp;operator*=(const vec3 &amp;v2);28 inline vec3 &amp;operator/=(const vec3 &amp;v2);29 inline float length() const&#123;30 return sqrt(e[0] * e[0] + e[1] * e[1] + e[2] * e[2]);31 &#125;32 inline float squared_length() const33 &#123;34 return e[0] * e[0] + e[1] * e[1] + e[2] * e[2];35 &#125;36 inline void make_unit_vector();37&#125;; 1inline float dot(const vec3&amp; v1, const vec3&amp; v2)&#123;2 return v1.e[0]*v2.e[0]+v1.e[1]*v2.e[1]+v1.e[2]*v2.e[2];3&#125;4inline vec3 cross(const vec3 &amp;v1, const vec3 v2)&#123;5 return vec3((v1.e[1]*v2.e[2] - v1.e[2]*v2.e[1]),6​ (-(v1.e[0]*v2.e[2]- v1.e[2]*v2.e[0])),7​ (v1.e[0]*v2.e[1]- v1.e[1]*v2.e[0]));8&#125;","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-12-08T09:45:48.669Z","updated":"2019-12-08T09:45:48.669Z","comments":true,"path":"2019/12/08/hello-world/","link":"","permalink":"http://yoursite.com/2019/12/08/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}